var z= 2.5;
var emirateTower = {
//front
    vertices: [
        /*0,
        0,
        2.5,

        1,
        0,
        2,

        0,
        2,
        2.5,


        0,
        2,
        2.5,

        1,
        2,
        2,

        1,
        0,
        2,

        0,
        0,
        1.5,

        1,
        0,
        2,

        0,
        2,
        1.5,

        0,
        2,
        1.5,

        1,
        0,
        2,

        1,
        2,
        2,

        0,
        0,
        1.5,

        0,
        2,
        2.5,

        0,
        0,
        2.5,


        0,
        0,
        z-1,

        0,
        2,
        z-1,

        0,
        2,
        z,

        0,
        2,
        z,

        1,
        2,
        2,

        2,
        2.7,
        2,

        0,
        2,
        z-1,

        1,
        2,
        2,

        1,
        2.7,
        2,

        0,
        2,
        z-1,

        0,
        2,
        z,

        1,
        2.7,
        2,*/

            -.5,-.5,-.5,  .5,-.5,-.5,  .5, .5,-.5,        -.5,-.5,-.5,  .5, .5,-.5, -.5, .5,-.5,    // z = 0
            -.5,-.5, .5,  .5,-.5, .5,  .5, .5, .5,        -.5,-.5, .5,  .5, .5, .5, -.5, .5, .5,    // z = 1
            -.5,-.5,-.5,  .5,-.5,-.5,  .5,-.5, .5,        -.5,-.5,-.5,  .5,-.5, .5, -.5,-.5, .5,    // y = 0
            -.5, .5,-.5,  .5, .5,-.5,  .5, .5, .5,        -.5, .5,-.5,  .5, .5, .5, -.5, .5, .5,    // y = 1
            -.5,-.5,-.5, -.5, .5,-.5, -.5, .5, .5,        -.5,-.5,-.5, -.5, .5, .5, -.5,-.5, .5,    // x = 0
            .5,-.5,-.5,  .5, .5,-.5,  .5, .5, .5,         .5,-.5,-.5,  .5, .5, .5,  .5,-.5, .5     // x = 1

    ],

    indices: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],
    normals: [
        /*0.4472135954999579,
        -0,
        0.8944271909999159,
        -0.4472135954999579,
        0, -0.8944271909999159,
        -0.4472135954999579,
        0,
        0.8944271909999159,
        -0.4472135954999579,
        0,
        0.8944271909999159,
        1,
        0,
        0,
        1,
        0,
        0,
        0.3768673314407159,
        -0.5383819020581655,
        0.7537346628814318,
        -0.4472135954999579,
        0, 0.8944271909999159,
        -0.5734623443633284,
        0.8192319205190405,
        0*/
        0,0,-1, 0,0,-1, 0,0,-1,     0,0,-1, 0,0,-1, 0,0,-1,
        0,0,1, 0,0,1, 0,0,1,        0,0,1, 0,0,1, 0,0,1,
        0,-1,0, 0,-1,0, 0,-1,0,     0,-1,0, 0,-1,0, 0,-1,0,
        0,1,0, 0,1,0, 0,1,0,        0,1,0, 0,1,0, 0,1,0,
        -1,0,0, -1,0,0, -1,0,0,     -1,0,0, -1,0,0, -1,0,0,
        1,0,0, 1,0,0, 1,0,0,        1,0,0, 1,0,0, 1,0,0,
    ],
};
function mag(vec) {
    return Math.sqrt(Math.pow(vec[0], 2)+Math.pow(vec[1], 2)+Math.pow(vec[2], 2))
}
function normalize(normal) {
    var returnVal = [];
    var m = mag(normal);
    for (var i = 0; i < normal.length; i++) {
        if (m > 0) {
            returnVal.push(normal[i] / m);
        }
    }
    return returnVal;
}
function computeNormals(triangle){
    //console.log(triangle);

    var U = []; //triangle[1] - triangle[0];
    var V = [];//triangle[2] - triangle[0];
    for(var i =0; i< 3; i++){
        U.push(triangle[1][i] - triangle[0][i]);
        V.push(triangle[2][i] - triangle[0][i]);
    }

   // console.log('U array ',U);
    //console.log('V array ',V);

    var Normal = [
        (U[1]*V[2]) - (U[2]*V[1]),
        (U[2]*V[0]) - (U[0]*V[2]),
        (U[0]*V[1]) - (U[1] * V[0]),
    ];
    var returnNormal = normalize(Normal);
    console.log('normalsBeing Produced ', returnNormal);
    return returnNormal;
}